{"choices":[{"id":"question1","question":"数据结构中的线性表不包括下列哪种类型？","options":[{"id":"A","text":"顺序表"},{"id":"B","text":"链表"},{"id":"C","text":"栈"},{"id":"D","text":"树"}]},{"id":"question1","question":"在一个空栈中依次进行了以下操作: PUSH(1), PUSH(2), POP(), PUSH(3), PUSH(4), POP()。最后一个 POP 操作后栈顶元素是多少？","options":[{"id":"A","text":"1"},{"id":"B","text":"2"},{"id":"C","text":"3"},{"id":"D","text":"4"}]},{"id":"question1","question":"下列哪种搜索算法不属于树搜索算法？","options":[{"id":"A","text":"深度优先搜索（DFS）"},{"id":"B","text":"广度优先搜索（BFS）"},{"id":"C","text":"二分搜索算法"},{"id":"D","text":"A*搜索算法"}]},{"id":"question1","question":"一棵树的前序遍历为ABDECFG，中序遍历为DBEAFCG。那么后序遍历的结果是什么？","options":[{"id":"A","text":"DEBFGCA"},{"id":"B","text":"DEBFCA"},{"id":"C","text":"DEBFGAC"},{"id":"D","text":"DEFGBCA"}]},{"id":"question1","question":"对于含有n个结点的完全二叉树，其叶子结点数量最多是多少？","options":[{"id":"A","text":"n/2"},{"id":"B","text":"(n+1)/2"},{"id":"C","text":"(n-1)/2"},{"id":"D","text":"(n+1)/2 下取整"}]}],"choiceTotal":20,"blanks":["在队列这种数据结构中，插入操作称为 ***，而删除操作称为 ***。\n","在计算机科学中，递归算法必须具有两个基本特征: 一个简单的基准情况（基案）和一个指向基准情况的 *** 。","在一棵二叉搜索树（BST）中，左子树中的任意节点的值都 *** 右子树中任意节点的值。","*** 是一种允许在其任何位置进行插入和删除操作的线性数据结构。\n","图的两种主要表示方法是邻接矩阵和邻接 ***, 后者特别适合表示 *** 图。"],"blankTotal":20,"shorts":["简述顺序存储结构与链式存储结构的区别。","描述栈和队列在逻辑结构上的特点，并指出它们分别适用于哪些场景","什么是递归？递归函数编写时需要注意哪些问题？","简述二叉搜索树（BST）的基本操作及其时间复杂度。"],"shortTotal":20,"programs":["数组中两数之和\n\n给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那两个整数，并返回它们的数组下标。\n\n你可以假设每种输入只会对应一个答案。但是，数组中同一个元素不能使用两遍。\n\n示例:\n输入: nums = [2, 7, 11, 15], target = 9\n输出: [0, 1]\n输出解释: nums[0] + nums[1] = 2 + 7 = 9，所以返回 [0, 1]","翻转链表。\n\n定义一个函数，输入一个链表的头节点，反转该链表并输出反转后链表的头节点。\n\n示例:\n输入: 1->2->3->4->5->NULL\n输出: 5->4->3->2->1->NULL\n\n链表节点定义:\npublic class ListNode {\n    int val;\n    ListNode next;\n    ListNode(int x) { val = x; }\n}"],"programTotal":40,"choicesAnswer":["树","3","二分搜索算法","DEBFGCA","(n+1)/2"],"blanksAnswer":["入队,出队","递归调用","小于","链表","列表,稀疏"],"shortsAnswer":["参考答案：顺序存储结构中，数据元素在内存中是连续存放的，可以通过元素的相对位置直接访问，这样的数据结构易于实现并可以快速访问，但在进行插入和删除操作时可能需要移动大量元素；而链式存储结构中，数据元素可以分散在内存的任何位置，元素之间通过指针相互连接，这种结构不需要连续的内存空间且插入或删除时不需要移动其他元素，但访问元素时需要从头遍历链表，访问效率相对较低。\n","参考答案：栈是一种后进先出（LIFO, Last In First Out）的线性数据结构，只允许在一端进行插入和删除操作。栈通常用于解决具有嵌套关系的问题，如函数调用、递归等。队列是一种先进先出（FIFO, First In First Out）的线性数据结构，只允许在队尾进行插入操作，而在队头进行删除操作。队列适合处理按顺序处理的数据，如任务调度、打印任务管理等场景。","参考答案：递归是一种通过函数自我调用以解决问题的过程，它涉及到将一个大问题分解成相同解决方案的更小问题。编写递归函数时，需要确保有基本情况（终止条件）来结束递归调用，以防止无限递归；同时需要考虑到递归的时间复杂度和空间复杂度，递归过深可能会导致栈溢出。","参考答案：二叉搜索树（BST）是一种特殊的二叉树，其中每个节点都含有一个键，且对于"],"programsAnswer":["1","1"]}